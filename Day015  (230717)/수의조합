조합 (Combination):

[1단계]

숫자 4개 1, 2, 3, 4 가지고
2개의 조합을 만들어내는 코드를 작성하세요.
단, 앞의 숫자가 뒷 숫자보다 작아야 한다.

1 2
1 3
1 4
2 3
2 4
3 4

[2단계]

주어진 정수 배열에서 선택할 수 있는 모든 조합을 생성하는 C# 코드를 작성해 보세요. 이 때, 선택해야 하는 요소의 수를 지정할 수 있어야 합니다.
예를 들어, 입력 배열이 [1, 2, 3, 4]이고 선택해야하는 요소의 수가 2라면 가능한 모든 조합은 다음과 같습니다:

1 2
1 3
1 4
2 3
2 4
3 4

1.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Quiz052
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] arr = { 1, 2, 3, 4, };
            for (int i = 0; i < arr.Length; i++)
            {
                for(int j=0; j<arr.Length; j++)
                {
                    if (arr[i] != arr[j] && arr[i] < arr[j])
                    Console.WriteLine($"{arr[i]}{arr[j]}");
                }
            }
        }
    }
}

2.
using System;

namespace Quiz052
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int[] arr = { 1, 2, 3, 4 };
            int a = int.Parse(Console.ReadLine());
            if (a == 2)
            {
                for (int i = 0; i < arr.Length; i++)
                {
                    for (int j = 0; j < arr.Length; j++)
                    {
                        if (arr[i] != arr[j] && arr[i] < arr[j])
                            Console.WriteLine($"{arr[i]}{arr[j]}");
                    }
                }
            }


            if (a == 3)
            {
                for (int i = 0; i < arr.Length; i++)
                {
                    for (int j = 0; j < arr.Length; j++)
                    {
                        for (int k = 0; k < arr.Length; k++)
                        {


                            if (arr[i] != arr[j] && arr[i] < arr[j] &&
                                arr[j] != arr[k] && arr[j] < arr[k] &&
                                arr[i] != arr[k]) { Console.WriteLine($"{arr[i]}{arr[j]}{arr[k]}"); }
                                
                        }
                    }
                }

            }
        }
    }
}
